Solving DGLAP
=============

We are solving the DGLAP equations given in x-space by

.. math::
    \frac{d}{d\ln(\mu_F^2)} \mathbf{f}(x,\mu_F^2) =
        \int\limits_x^1\!\frac{dy}{y}\, \mathbf{P}(x/y,a_s) \cdot \mathbf{f}(y,\mu_F^2)

with :math:`\mathbf P` the Altarelli-Parisi splitting functions (see :doc:`pQCD`).
In :doc:`Mellin space <Mellin>` the DGLAP equations are just differential equations:

.. math::
    \frac{d}{d\ln(\mu_F^2)} \tilde{\mathbf{f}}(N,\mu_F^2) = -\gamma(N,a_s) \cdot \tilde{\mathbf{f}}(N,\mu_F^2)

(Note the additional minus in the definition for :math:`\gamma`).

We change the evolution variable to (monotonic) :ref:`theory/pQCD:strong coupling` :math:`a_s(\mu_F^2)`
and the equations to solve become

.. math::
    \frac{d}{da_s} \tilde{\mathbf{f}}(N,a_s)
        = \frac{d\ln(\mu_F^2)}{da_s} \cdot \frac{d \tilde{\mathbf{f}}(N,\mu_F^2)}{d\ln(\mu_F^2)} 
        = -\frac{1}{\beta(a_s)} \cdot \gamma(N,a_s) \cdot \tilde{\mathbf{f}}(N,a_s)

The (formal) solution can then be written in terms of an evolution kernel operator (EKO) :math:`\mathbf E`

.. math::
    \tilde{\mathbf{f}}(N,a_s^1) &= \tilde{\mathbf{E}}(a_s^1 \leftarrow a_s^0) \cdot \tilde{\mathbf{f}}(N,a_s^0)\\
    \tilde{\mathbf{E}}(a_s^1 \leftarrow a_s^0) &= \exp\left[-\int\limits_{a_s^0}^{a_s^1} \frac{\gamma(N,a_s)}{\beta(a_s)} da_s \right]

Using :doc:`Interpolation <Interpolation>` on both the inital and final PDF, we can then discretize the
EKO in x-space and define :math:`\hat{\mathbf{E}}_{k,j}` (represented by
:class:`~eko.evolution_operator.PhysicalOperator`) by

.. math::
    \hat{\mathbf{E}}_{k,j}(a_s^1 \leftarrow a_s^0) = \mathcal{M}^{-1}\left[\tilde{\mathbf{E}}(a_s^1 \leftarrow a_s^0)\tilde p_j(N)\right](x_k)

Now, we can write the solution to DGLAP in a true matrix operator scheme and find

.. math::
    \mathbf{f}(x_k,a_s^1) = \hat{\mathbf{E}}_{k,j}(a_s^1 \leftarrow a_s^0) \mathbf{f}(x_j,a_s^0)


In the non-singlet sector the equations decouple and we do not need to worry about matrices.

The issue of matching conditions when crossing flavor thresholds is dicussed in a seperate :doc:`document <Matching>`

Leading Order
-------------

LO Non-Singlet Evolution
^^^^^^^^^^^^^^^^^^^^^^^^

We find

.. math::
    \frac{d}{da_s} \tilde f_{ns}^{(0)}(a_s) = \frac{\gamma_{ns}^{(0)}}{\beta_0 a_s}  \cdot \tilde f_{ns}^{(0)}(a_s)

with :math:`\gamma_{ns}^{(0)} = \gamma_{ns,+}^{(0)} = \gamma_{ns,-}^{(0)} = \gamma_{ns,v}^{(0)} = \gamma_{qq}^{(0)}`.

The EKO is then given by a simple exponential :cite:`Vogt:2004ns`

.. math::
    \tilde E^{(0)}_{ns}(a_s^1 \leftarrow a_s^0) = \exp\left[\ln(a_s^1/a_s^0) \gamma_{ns}^{(0)}/\beta_0 \right]

LO Singlet Evolution
^^^^^^^^^^^^^^^^^^^^

We find

.. math::
    \frac{d}{da_s} \dSV{0}{a_s} = \frac{\mathbf R_0}{a_s} \cdot \dSV{0}{a_s}

with

.. math::
    \mathbf R_0 = \frac{\gamma_S^{(0)}}{\beta_0}\,, \qquad
    \gamma_S^{(0)} = \begin{pmatrix}
                                \gamma_{qq}^{(0)} & \gamma_{qg}^{(0)}\\
                                \gamma_{gq}^{(0)} & \gamma_{gg}^{(0)}
                            \end{pmatrix}

In order to exponentiate this matrix, we decompose it
:math:`\mathbf R_0 = \lambda_+ {\mathbf e}_+ + \lambda_- {\mathbf e}_-` with
the eigenvalues :math:`\lambda_{\pm}` and the projectors :math:`\mathbf e_{\pm}` given by :cite:`Vogt:2004ns`

.. math::
    \lambda_{\pm} &= \frac 1 {2\beta_0} \left( \gamma_{qq}^{(0)} + \gamma_{gg}^{(0)} \pm \sqrt{(\gamma_{qq}^{(0)}-\gamma_{gg}^{(0)})^2 + 4\gamma_{qg}^{(0)}\gamma_{gq}^{(0)}} \right)\\
    {\mathbf e}_{\pm} &= \frac{1}{\lambda_{\pm} - \lambda_{\mp}} \left( \mathbf R_0  - \lambda_{\mp} \mathbf I \right)

with :math:`\mathbf I` the 2x2 identity matrix in flavour space.
The projectors obey the usual properties, i.e.

.. math::
    {\mathbf e}_{\pm} \cdot {\mathbf e}_{\pm} = {\mathbf e}_{\pm} \qquad {\mathbf e}_{\pm} \cdot {\mathbf e}_{\mp} = 0

and thus the exponentiation becomes easier again.

The EKO is then given by

.. math::
    \ESk{0}{a_s^1}{a_s^0} = \em \exp\left[\ln(a_s^1/a_s^0) \lambda_{-} \right] + \ep \exp\left[\ln(a_s^1/a_s^0) \lambda_{+} \right]

Next-to-Leading Order
---------------------

NLO Non-Singlet Evolution
^^^^^^^^^^^^^^^^^^^^^^^^^
We find

.. math::
    \frac{d}{da_s} \tilde f_{ns}^{(1)}(a_s) = \frac{\gamma_{ns}^{(0)} a_s + \gamma_{ns}^{(1)} a_s^2}{\beta_0 a_s^2 + \beta_1 a_s^3} \cdot \tilde f_{ns}^{(1)}(a_s)

with :math:`\gamma_{ns} \in \{\gamma_{ns,+},\gamma_{ns,-}=\gamma_{ns,v}\}`.

To solve this equation we provide the same 4 strategies as :cite:`Vogt:2004ns` :

- the *exact* solution to the EKO is given by the exponentials: :cite:`RuizArriola:1998er,Vogt:2004ns`

.. math::
    \tilde E^{(1),\text{exact}}_{ns}(a_s^1 \leftarrow a_s^0) &= \tilde E^{(0)}_{ns}(a_s^1 \leftarrow a_s^0) \exp\left[\ln\left(\frac{1+a_s^1 b_1}{1 + a_s^0 b_1}\right)\bar \gamma_{ns}^{(1)} \right] \\
    \bar \gamma_{ns}^{(1)} &= \frac{\gamma_{ns}^{(1)}}{\beta_1} - \frac{\gamma_{ns}^{(0)}}{\beta_0}

- expanding the *argument* of the exponential of the new term we obtain:

.. math::
    \tilde E^{(1),\text{LL}}_{ns}(a_s^1 \leftarrow a_s^0) = \tilde E^{(0)}_{ns}(a_s^1 \leftarrow a_s^0) \exp\left[(a_s^1 - a_s^0) b_1 \bar \gamma_{ns}^{(1)} \right]

- expanding the *argument* of the exponential of the new term we obtain, but keeping the order:

.. math::
    \tilde E^{(1),\text{truncated'}}_{ns}(a_s^1 \leftarrow a_s^0) = \tilde E^{(0)}_{ns}(a_s^1 \leftarrow a_s^0) \frac{1 + a_s^1 b_1 \bar \gamma_{ns}^{(1)}}{1 + a_s^0 b_1 \bar \gamma_{ns}^{(1)}}

- expanding the *whole* exponential of the new term we obtain:

.. math::
    \tilde E^{(1),\text{truncated}}_{ns}(a_s^1 \leftarrow a_s^0) = \tilde E^{(0)}_{ns}(a_s^1 \leftarrow a_s^0) \left[1 + (a_s^1 - a_s^0) b_1 \bar \gamma_{ns}^{(1)} \right]

NLO Singlet Evolution
^^^^^^^^^^^^^^^^^^^^^

We find

.. math::
    \frac{d}{da_s} \dSV{1}{a_s} = \frac{\gamma_{S}^{(0)} a_s + \gamma_{S}^{(1)} a_s^2}{\beta_0 a_s^2 + \beta_1 a_s^3} \cdot \dSV{1}{a_s}

with :math:`\gamma_{S}^{(0)} \gamma_{S}^{(1)} \neq \gamma_{S}^{(1)} \gamma_{S}^{(0)}`.

We are seeking for an perturbative solution around the (exact) leading order operator: :cite:`Vogt:2004ns`

.. math::
    \frac{d}{da_s} \dSV{1}{a_s} = \frac{\mathbf R (a_s)}{a_s} \cdot \dSV{1}{a_s}\,, \quad
    \mathbf R (a_s) = \sum\limits_{k=0} a_s^k \mathbf R_{k}

where in NLO we find (in addition to the LO operator)

.. math::
    \mathbf R_1 = \gamma_{S}^{(1)}/\beta_0 - b_1 \gamma_{S}^{(0)}
    \quad \text{and} \quad
    \mathbf R_k = - b_1 \mathbf R_{k-1}\,\text{for}\,k>1

Likewise for the solution we set

.. math::
    \dSV{1}{a_s^1} = \mathbf U (a_s^1) \ESk{1}{a_s^1}{a_s^0} {\mathbf U}^{-1} (a_s^0) \dSV{1}{a_s^0}\,, \quad
    \mathbf U (a_s) = \mathbf I + \sum\limits_{k=1} a_s^k \mathbf U_k

Using the LO projectors we can make an ansatz for the evolution operator coefficients :math:`\mathbf U_k`

.. math::
    \mathbf U_k = \em \mathbf U_k \em + \em \mathbf U_k \ep + \ep \mathbf U_k \em + \ep \mathbf U_k \ep

and find: